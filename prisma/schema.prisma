// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Shop {
  id        String @id @default(cuid())
  name      String
  address   String?
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users      User[]
  categories Category[]
  products   Product[]
  suppliers  Supplier[]
  orders     Order[]
  inventory  Inventory[]

  @@map("shops")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  fullName  String
  password  String
  role      UserRole @default(STAFF)
  shopId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  shop   Shop    @relation(fields: [shopId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("users")
}

model Category {
  id          String @id @default(cuid())
  name        String
  description String?
  shopId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  shop     Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  products Product[]

  @@map("categories")
}

model Supplier {
  id          String  @id @default(cuid())
  name        String
  contactName String?
  email       String?
  phone       String?
  address     String?
  shopId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  shop     Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  products Product[]
  orders   Order[]

  @@map("suppliers")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  sku         String  @unique
  barcode     String?
  price       Float
  costPrice   Float?
  categoryId  String
  supplierId  String?
  shopId      String
  unit        String  @default("個")
  minStock    Int     @default(0)
  maxStock    Int?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  shop           Shop            @relation(fields: [shopId], references: [id], onDelete: Cascade)
  category       Category        @relation(fields: [categoryId], references: [id])
  supplier       Supplier?       @relation(fields: [supplierId], references: [id])
  inventory      Inventory[]
  orderItems     OrderItem[]
  stockMovements StockMovement[]

  @@map("products")
}

model Inventory {
  id            String @id @default(cuid())
  productId     String
  shopId        String
  currentStock  Int    @default(0)
  reservedStock Int    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  shop    Shop    @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([productId, shopId])
  @@map("inventory")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  supplierId  String
  shopId      String
  userId      String
  status      OrderStatus @default(PENDING)
  orderDate   DateTime    @default(now())
  deliveryDate DateTime?
  totalAmount Float       @default(0)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  supplier   Supplier    @relation(fields: [supplierId], references: [id])
  shop       Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model StockMovement {
  id            String           @id @default(cuid())
  productId     String
  shopId        String
  movementType  MovementType
  quantity      Int
  previousStock Int
  newStock      Int
  reason        String?
  orderId       String?
  userId        String?
  createdAt     DateTime         @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("stock_movements")
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

enum OrderStatus {
  PENDING
  ORDERED
  DELIVERED
  CANCELLED
}

enum MovementType {
  IN          // 入庫
  OUT         // 出庫
  ADJUSTMENT  // 調整
  RETURN      // 返品
}
